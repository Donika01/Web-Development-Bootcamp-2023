/* FLEXBOX is a tool, or a series of properties that we use to lay out items on our page in a box of content. */
/* We have some container and we want to distribute space inside of that container. */

body {
    font-family: 'Open Sans', sans-serif;
}

h1 {
    text-align: center;
}

/* Te flex model */
/* <---> main axis and cross axis  */

/* Flex-direction:row (left to right) | row-reverse (right to left) | column (top to bottom) | column-reverse (bottom to top) */
/* If it width or height of the container (section) is smaller then the divs then they will shtrink */
/* flex-direction: row; (default); */

/* Justify Content determines how the actual elements, how the content is distributed across the main axis */
/* justify-content: flex-start (default) */
/* flex-start, flex-end, flex-center, space-between (between elements, but not between the element and the container) */
/* space-around (half space in the far left and right) */
/* space-evenly (The same amount of space) */
/* justify-content is not horizontal or vertical, it can be either depending on flex-direction*/

/* Flex-Wrap: nowrap (default) | wrap | wrap-reverse*/
/* Flex-wrap is how we change the direction of the cross axis */

/* Alighn-Items is going to distribute space or distribute items along the cross axis  */
/* baseline - drawing a line at the bottom of each letter  */

/* Justify-content is on the main axis, align items on the cross axis */

/* Align-content works only when we have flex-wrap. It is used wehen we have multiple rows (controlles the space between the rows) or columns*/
/* Flex-start, flex-end, center, space-between, space-around etc. */

/* Align-Self is used to align a single element (individual items) (not the entire container) */
/* Align-items,self,content all have to do with the cross axis */

/* Flex Sizing Properties has to do with individual items in a container and how they grow or shrink when there is available space or when there is too little space */
/* Flex-Basis is just the initial size that an element should be added into our box as, it might be a width, it might be a height depending on the main axis direction. */

/*  Flex-grow does not leave empty space, if there is space left, does not have units */

/* Flex-shrink default value 1, it means that they will shrink at the same rate */

#container {
    background-color: #003049;
    width: 90%;
    /* height: 500px; */
    margin: 0 auto;
    border: 5px solid #003049;
    display: flex;
    flex-direction: row;
    justify-content: center;
    /* flex-wrap: wrap; */
}

#container div {
    width: 200px;
    height: 200px;
    /* Prevent them to be too small (min-width) or too big */
    /* max-width: 300px; */
    flex-basis: 600px;
}

div:nth-of-type(1) {
    flex-shrink: 2;
    /* 2 - How much it should shrink compared to the other elements */
}

div:nth-of-type(5) {
    flex-grow: 2;
    flex-shrink: 0;
}